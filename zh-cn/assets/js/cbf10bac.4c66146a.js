"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5079],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),g=s(t),m=o,f=g["".concat(p,".").concat(m)]||g[m]||u[m]||a;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=g;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3027:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return l},default:function(){return g}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],c={sidebar_label:"PING-PONG",sidebar_position:2},p="PING-PONG",s={unversionedId:"developing-contracts/examples/ping",id:"developing-contracts/examples/ping",title:"PING-PONG",description:"\u4f7f\u7528 Gear \u5199\u4ee3\u7801\u5f88\u5bb9\u6613\uff01",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/developing-contracts/examples/ping.md",sourceDirName:"developing-contracts/examples",slug:"/developing-contracts/examples/ping",permalink:"/zh-cn/developing-contracts/examples/ping",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/examples/ping.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"PING-PONG",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\u524d\u671f\u51c6\u5907",permalink:"/zh-cn/developing-contracts/examples/prerequisites"},next:{title:"ERC-721: NFT",permalink:"/zh-cn/developing-contracts/examples/erc-721"}},l=[],u={toc:l};function g(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ping-pong"},"PING-PONG"),(0,a.kt)("p",null,"\u4f7f\u7528 Gear \u5199\u4ee3\u7801\u5f88\u5bb9\u6613\uff01"),(0,a.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u7684 Ping-pong \u5408\u7ea6\u5c0f\u7a0b\u5e8f:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'    #![no_std]\n\n    use gstd::{debug, msg, prelude::*};\n\n    static mut MESSAGE_LOG: Vec<String> = vec![];\n\n    #[no_mangle]\n    pub unsafe extern "C" fn handle() {\n        let new_msg = String::from_utf8(msg::load_bytes()).expect("Invalid message");\n\n        if new_msg == "PING" {\n            msg::reply_bytes("PONG", 12_000_000, 0);\n        }\n\n        MESSAGE_LOG.push(new_msg);\n\n        debug!("{:?} total message(s) stored: ", MESSAGE_LOG.len());\n\n        for log in MESSAGE_LOG.iter() {\n            debug!(log);\n        }\n    }\n\n    #[no_mangle]\n    pub unsafe extern "C" fn init() {}\n')),(0,a.kt)("p",null,"\u5b83\u53ea\u4f1a\u5c06",(0,a.kt)("inlineCode",{parentName:"p"},"PONG"),"\u53d1\u9001\u56de\u539f\u59cb\u53d1\u9001\u8005(\u53ef\u4ee5\u662f\u4f60!)"),(0,a.kt)("p",null,"GitHub \u94fe\u63a5: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/tree/master/ping"},"https://github.com/gear-tech/apps/tree/master/ping")))}g.isMDXComponent=!0}}]);