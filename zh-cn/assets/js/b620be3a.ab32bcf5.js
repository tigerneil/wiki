"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8490],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},i={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,f=d["".concat(p,".").concat(m)]||d[m]||i[m]||a;return t?r.createElement(f,c(c({ref:n},s),{},{components:t})):r.createElement(f,c({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=d;var u={};for(var p in n)hasOwnProperty.call(n,p)&&(u[p]=n[p]);u.originalType=e,u.mdxType="string"==typeof e?e:o,c[1]=u;for(var l=2;l<a;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8049:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),c=["components"],u={sidebar_label:"ERC-20",sidebar_position:3},p="\u4ec0\u4e48\u662f ERC-20?",l={unversionedId:"developing-contracts/examples/erc20",id:"developing-contracts/examples/erc20",title:"\u4ec0\u4e48\u662f ERC-20?",description:"ERC20\u662f\u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u521b\u5efa\u548c\u53d1\u884c\u667a\u80fd\u5408\u7ea6\u7684\u6807\u51c6\u3002\u5b83\u662f\u7531\u4ee5\u592a\u574a\u5f00\u53d1\u8005\u57282015\u5e74\u4ee3\u8868\u4ee5\u592a\u574a\u793e\u533a\u521b\u5efa\u7684\uff0c\u5e76\u4e8e2017\u5e74\u88ab\u6b63\u5f0f\u8ba4\u53ef\u3002",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/developing-contracts/examples/erc20.md",sourceDirName:"developing-contracts/examples",slug:"/developing-contracts/examples/erc20",permalink:"/zh-cn/developing-contracts/examples/erc20",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/examples/erc20.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"ERC-20",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"ERC-721: NFT",permalink:"/zh-cn/developing-contracts/examples/erc-721"},next:{title:"DAO",permalink:"/zh-cn/developing-contracts/examples/DAO"}},s=[{value:"<code>Action</code> and <code>Event</code>",id:"action-and-event",children:[],level:3},{value:"<code>Action</code> \u548c <code>Event</code> \u4e2d\u4f7f\u7528\u7684 Message/Reply \u7ed3\u6784",id:"action-\u548c-event-\u4e2d\u4f7f\u7528\u7684-messagereply-\u7ed3\u6784",children:[],level:3}],i={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,c);return(0,a.kt)("wrapper",(0,r.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u4ec0\u4e48\u662f-erc-20"},"\u4ec0\u4e48\u662f ERC-20?"),(0,a.kt)("p",null,"ERC20\u662f\u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u521b\u5efa\u548c\u53d1\u884c\u667a\u80fd\u5408\u7ea6\u7684\u6807\u51c6\u3002\u5b83\u662f\u7531\u4ee5\u592a\u574a\u5f00\u53d1\u8005\u57282015\u5e74\u4ee3\u8868\u4ee5\u592a\u574a\u793e\u533a\u521b\u5efa\u7684\uff0c\u5e76\u4e8e2017\u5e74\u88ab\u6b63\u5f0f\u8ba4\u53ef\u3002\nERC20 is a standard that\u2019s used for creating and issuing smart contracts on the Ethereum blockchain. It was created by Ethereum developers on behalf of the Ethereum community in 2015, and it was officially recognised in 2017. "),(0,a.kt)("p",null,"\u8fd9\u4e9b\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u7528\u6765\u521b\u5efa\u4ee3\u5e01\u5316\u8d44\u4ea7\uff0c\u4ee3\u8868\u4ee5\u592a\u574a\u533a\u5757\u94fe\u4e0a\u7684\u4efb\u4f55\u4e1c\u897f\uff0c\u4f8b\u5982\uff1a\nThese smart contracts can then be used to create tokenized assets that represent anything on the Ethereum blockchain like:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u6e38\u620f\u4e2d\u7684\u4ee3\u5e01")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u7c7b\u4f3c\u516c\u53f8\u80a1\u7968\u8fd9\u6837\u7684\u91d1\u878d\u5de5\u5177")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u6cd5\u5b9a\u8d27\u5e01\uff0c\u6bd4\u5982\u7f8e\u5143")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"\u9ec4\u91d1"))),(0,a.kt)("p",null,"\u8fd9\u4e9b\u901a\u8bc1\u5316\u7684\u8d44\u4ea7\u88ab\u79f0\u4e3a ",(0,a.kt)("inlineCode",{parentName:"p"},"Fungible Token"),"\uff0c\u7ed9\u5b9a\u7684 ERC20 Token \u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u662f\u76f8\u540c\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u53ef\u4ee5\u4e92\u6362\u3002\u552f\u4e00\u4e14\u4e0d\u80fd\u4e92\u6362\u7684 Token \u88ab\u79f0\u4e3a NFT (Non-Fungible Token)\u3002"),(0,a.kt)("h1",{id:"\u5b58\u50a8\u7ed3\u6784"},"\u5b58\u50a8\u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"struct FungibleToken {\n    name: String,    /// Name of the token.\n    symbol: String,    /// Symbol of the token.\n    total_supply: u128,    /// Total supply of the token.\n    balances: BTreeMap<ActorId, u128>,    /// Map to hold balances of token holders.\n    allowances: BTreeMap<ActorId, BTreeMap<ActorId, u128>>,    /// Map to hold allowance information of token holders.\n    creator: ActorId,    /// Creator of the token.\n    admins: BTreeSet<ActorId>,    /// Creator approved set of admins, who can do mint/burn.\n}\n")),(0,a.kt)("h3",{id:"action-and-event"},(0,a.kt)("inlineCode",{parentName:"h3"},"Action")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"Event")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Event")," \u5728 ",(0,a.kt)("inlineCode",{parentName:"p"},"Action")," \u89e6\u53d1\u65f6\u751f\u6210\u3002 ",(0,a.kt)("inlineCode",{parentName:"p"},"Action")," \u5305\u88c5\u4e86\u5927\u91cf\u7684 ",(0,a.kt)("inlineCode",{parentName:"p"},"Input")," \u7ed3\u6784\uff0c",(0,a.kt)("inlineCode",{parentName:"p"},"Event")," \u5305\u88c5\u4e86 ",(0,a.kt)("inlineCode",{parentName:"p"},"Reply"),"\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub enum Action {\n    Mint(MintInput),\n    Burn(BurnInput),\n    Transfer(TransferInput),\n    TransferFrom(TransferFromInput),\n    Approve(ApproveInput),\n    IncreaseAllowance(ApproveInput),\n    DecreaseAllowance(ApproveInput),\n    TotalIssuance,\n    BalanceOf(ActorId),\n    AddAdmin(ActorId),\n    RemoveAdmin(ActorId),\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub enum Event {\n    Transfer(TransferReply),\n    Approval(ApproveReply),\n    TotalIssuance(u128),\n    Balance(u128),\n    AdminAdded(ActorId),\n    AdminRemoved(ActorId),\n    TransferFrom(TransferFromReply),\n}\n")),(0,a.kt)("h3",{id:"action-\u548c-event-\u4e2d\u4f7f\u7528\u7684-messagereply-\u7ed3\u6784"},(0,a.kt)("inlineCode",{parentName:"h3"},"Action")," \u548c ",(0,a.kt)("inlineCode",{parentName:"h3"},"Event")," \u4e2d\u4f7f\u7528\u7684 Message/Reply \u7ed3\u6784"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct InitConfig {\n    pub name: String,\n    pub symbol: String,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct MintInput {\n    pub account: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct BurnInput {\n    pub account: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct ApproveInput {\n    pub spender: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Encode, Decode, TypeInfo)]\npub struct ApproveReply {\n    pub owner: ActorId,\n    pub spender: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct TransferInput {\n    pub to: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct TransferReply {\n    pub from: ActorId,\n    pub to: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct TransferFromInput {\n    pub owner: ActorId,\n    pub to: ActorId,\n    pub amount: u128,\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug, Decode, Encode, TypeInfo)]\npub struct TransferFromReply {\n    pub owner: ActorId,\n    pub sender: ActorId,\n    pub recipient: ActorId,\n    pub amount: u128,\n    pub new_limit:\n")),(0,a.kt)("h1",{id:"erc-20-\u51fd\u6570"},"ERC-20 \u51fd\u6570"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    /// Executed on receiving `fungible-token-messages::MintInput`\n    /// If executed by creator or admins of the token then mints `amount` tokens into `account`.\n    fn mint(&mut self, account: &ActorId, amount: u128) \n\n    /// Executed on receiving `fungible-token-messages::BurnInput`\n    /// If executed by creator or admins of the token then burns `amount` tokens from `account`.\n    fn burn(&mut self, account: &ActorId, amount: u128)\n\n    /// Executed on receiving `fungible-token-messages::TransferInput` or `fungible-token-messages::TransferFromInput`.\n    /// Transfers `amount` tokens from `sender` account to `recipient` account.\n    fn transfer(&mut self, sender: &ActorId, recipient: &ActorId, amount: u128)\n\n    /// Executed on receiving `fungible-token-messages::ApproveInput`.\n    /// Adds/Updates allowance entry for `spender` account to tranfer upto `amount` from `owner` account.\n    fn approve(&mut self, owner: &ActorId, spender: &ActorId, amount: u128)\n\n    /// To find maximum value allowed to be transfer by `spender` from `owner` account. \n    fn get_allowance(&self, owner: &ActorId, spender: &ActorId) -> u128\n\n    /// To increase allowance of `spender` for `owner` account.\n    fn increase_allowance(&mut self, owner: &ActorId, spender: &ActorId, amount: u128)\n\n    /// To decrease allowance of `spender` for `owner` account.\n    fn decrease_allowance(&mut self, owner: &ActorId, spender: &ActorId, amount: u128)\n\n    /// Transfer `amount` from `owner` account to `recipient` account if `sender`'s allowance permits. \n    fn transfer_from(\n        &mut self,\n        owner: &ActorId,\n        sender: &ActorId,\n        recipient: &ActorId,\n        amount: u128,\n    ) -> u128\n\n    /// Token creator account add `account` as admin to token.\n    fn add_admin(&mut self, account: &ActorId)\n\n    /// Token creator account remove `account` as admin from token.\n    fn remove_admin(&mut self, account: &ActorId)\n\n    /// Increases total token supply.\n    fn increase_total_supply(&mut self, amount: u128)\n\n    /// Decreases total token supply.\n    fn decrease_total_supply(&mut self, amount: u128)\n\n    /// Executed on receiving `fungible-token-message::BalanceOf`, returns token balance of `account`.\n    fn balance_of(&self, account: &ActorI\n")))}d.isMDXComponent=!0}}]);