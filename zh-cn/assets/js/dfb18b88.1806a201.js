"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[6115],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),s=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,k=d["".concat(i,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7286:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],p={sidebar_label:"DAO",sidebar_position:4},i="\u53bb\u4e2d\u5fc3\u5316\u81ea\u6cbb\u7ec4\u7ec7(DAO)",s={unversionedId:"developing-contracts/examples/DAO",id:"developing-contracts/examples/DAO",title:"\u53bb\u4e2d\u5fc3\u5316\u81ea\u6cbb\u7ec4\u7ec7(DAO)",description:"\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u5728 Github \u4e0a\u83b7\u5f97//github.com/gear-tech/apps/tree/master/dao",source:"@site/i18n/zh-cn/docusaurus-plugin-content-docs/current/developing-contracts/examples/DAO.md",sourceDirName:"developing-contracts/examples",slug:"/developing-contracts/examples/DAO",permalink:"/zh-cn/developing-contracts/examples/DAO",editUrl:"https://github.com/gear-tech/wiki/edit/master/docs/developing-contracts/examples/DAO.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"DAO",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"ERC-20",permalink:"/zh-cn/developing-contracts/examples/erc20"},next:{title:"Gear Feeds",permalink:"/zh-cn/developing-contracts/examples/feeds"}},u=[{value:"\u6e90\u6587\u4ef6",id:"\u6e90\u6587\u4ef6",children:[],level:2},{value:"Structs",id:"structs",children:[],level:2},{value:"DAO \u51fd\u6570",id:"dao-\u51fd\u6570",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"\u53bb\u4e2d\u5fc3\u5316\u81ea\u6cbb\u7ec4\u7ec7dao"},"\u53bb\u4e2d\u5fc3\u5316\u81ea\u6cbb\u7ec4\u7ec7(DAO)"),(0,o.kt)("p",null,"\u667a\u80fd\u5408\u7ea6\u53ef\u4ee5\u5728 Github \u4e0a\u83b7\u5f97: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gear-tech/apps/tree/master/dao"},"https://github.com/gear-tech/apps/tree/master/dao")),(0,o.kt)("h2",{id:"\u6e90\u6587\u4ef6"},"\u6e90\u6587\u4ef6"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"erc20_functions.rs")," - \u5305\u542b ERC20 \u5408\u7ea6\u7684\u51fd\u6570\u3002DAO \u5408\u7ea6\u901a\u8fc7 ",(0,o.kt)("inlineCode",{parentName:"li"},"transfer_tokens")," \u548c ",(0,o.kt)("inlineCode",{parentName:"li"},"balance")," \u51fd\u6570\u540c ERC20 \u5408\u7ea6\u8fdb\u884c\u4ea4\u4e92:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub async fn transfer_tokens(\n        &mut self,\n        token_id: &ActorId, /// - ERC-20 \u5408\u7ea6\u5730\u5740\n        from: &ActorId, /// - \u53d1\u9001\u65b9\u5730\u5740\n        to: &ActorId, /// - \u63a5\u6536\u65b9\u5730\u5740\n        amount: u128, /// - Token \u6570\u91cf\n)\n")),(0,o.kt)("p",null,"\u8fd9\u4e2a\u51fd\u6570\u53d1\u9001\u4e00\u4e2a\u6d88\u606f(\u8fd9\u4e2a Action \u5728\u679a\u4e3e ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenAction")," \u4e2d\u5b9a\u4e49)\u5e76\u63a5\u53d7\u8fd4\u56de\u7ed3\u679c(\u8fd9\u4e2a\u8fd4\u56de\u7ed3\u679c\u5728\u679a\u4e3e ",(0,o.kt)("inlineCode",{parentName:"p"},"TokenEvent")," \u4e2d\u5b9a\u4e49):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"    let transfer_response: TokenEvent = msg::send_and_wait_for_reply(\n        *token_id, /// - ERC20 \u5408\u7ea6\u5730\u5740,\n        TokenAction::Transfer(transfer_data), /// - ERC20 \u5408\u7ea6\u4e2d\u7684 Action\n        exec::gas_available() - GAS_RESERVE,\n        0,\n    )\n")),(0,o.kt)("p",null,"balance \u51fd\u6570\u4e5f\u91c7\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5b9a\u4e49:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub async fn balance(\n        &mut self,\n        token_id: &ActorId, /// - ERC20 \u5408\u7ea6\u5730\u5740,\n        account: &ActorId, /// - \u8d26\u6237\u5730\u5740\n)\n")),(0,o.kt)("p",null,"\u5e76\u53d1\u9001\u6d88\u606f:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let balance_response: TokenEvent = msg::send_and_wait_for_reply(\n        *token_id, /// - ERC20 \u5408\u7ea6\u5730\u5740,\n        TokenAction::BalanceOf(H256::from_slice(account.as_ref())) /// - ERC20 \u5408\u7ea6\u4e2d\u7684 Action\n        exec::gas_available() - GAS_RESERVE,\n        0,\n    )\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"payloads.rs")," - \u5305\u542b\u5408\u7ea6\u5728\u8fd4\u56de\u65f6\u63a5\u6536\u548c\u53d1\u9001\u7684\u6570\u636e\u7ed3\u6784\u3002")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"lib.rs")," - \u5b9a\u4e49\u4e86\u5408\u7ea6\u7684\u903b\u8f91\u3002"))),(0,o.kt)("h2",{id:"structs"},"Structs"),(0,o.kt)("p",null,"\u5408\u7ea6\u5305\u542b\u4e86\u4ee5\u4e0b\u7ed3\u6784:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"struct Dao {\n    admin: ActorId,\n    approved_token_program_id: ActorId,\n    period_duration: u64,\n    voting_period_length: u64,\n    grace_period_length: u64,\n    dilution_bound: u128,\n    abort_window: u64, \n    total_shares: u128,\n    members: BTreeMap<ActorId, Member>,\n    member_by_delegate_key: BTreeMap<ActorId, ActorId>,\n    proposal_id: u128,\n    proposals: BTreeMap<u128, Proposal>,\n    approved_list: Vec<ActorId>,\n}\n")),(0,o.kt)("p",null,"\u5176\u4e2d:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"admin")," - \u521d\u59cb\u5316 DAO \u7684\u6210\u5458\u3002\u4ed6\u62e5\u6709\u4e00\u4efd\u4efd\u989d\uff0c\u53ef\u4ee5\u63d0\u4ea4\u65b0\u7684\u63d0\u6848\u548c\u6dfb\u52a0\u65b0\u7684\u6210\u5458\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"approved_token_program_id")," - Token (ERC20) \u5408\u7ea6\u7684\u5f15\u7528\uff0c\u7528\u6237\u7528\u6765\u62b5\u62bc\u83b7\u5f97 DAO \u7684\u4efd\u989d\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"period_duration")," - DAO \u4e2d\u6700\u5c0f\u7684\u65f6\u95f4\u5355\u4f4d\uff0c\u4ee5\u6beb\u79d2(ms)\u8ba1\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"voting_period_length")," - \u6295\u7968\u65f6\u957f\u3002\u6295\u7968\u6301\u7eed\u65f6\u95f4 = \u95f4\u9694\u65f6\u95f4\u5355\u4f4d ",(0,o.kt)("em",{parentName:"p"}," \u6295\u7968\u65f6\u957f\uff08period_duration ")," voting_period_length\uff09."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"grace_period_length")," - \u5728\u6295\u7968\u671f\u4e4b\u540e\uff0cDAO\u6210\u5458\u53ef\u4ee5\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u79bb\u5f00DAO (ragequit)\uff0c\u5728\u8fd9\u6bb5\u65f6\u95f4\u5185\u4ed6\u4eec\u4e0d\u4f1a\u88ab\u7a00\u91ca\uff0c\u6700\u7ec8\u4e5f\u4e0d\u4f1a\u53d7\u5230\u63d0\u6848\u88ab\u63a5\u53d7\u5230 DAO \u7684\u5f71\u54cd\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"dilution_bound")," - \u7a00\u91ca\u754c\u9650\u4fdd\u62a4\u6210\u5458\u5728\u96c6\u4f53\u6124\u6012\u7684\u60c5\u51b5\u4e0b\u514d\u4e8e\u8fc7\u5ea6\u7a00\u91ca\u3002\u5b83\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u7f13\u89e3\u8fd9\u6837\u4e00\u4e2a\u95ee\u9898: \u63d0\u6848\u901a\u8fc7\u540e\uff0c\u8bb8\u591a\u7528\u6237\u6124\u6012\u5730\u4ece DAO \u9000\u51fa\u3002\u5982\u679c\u80a1\u4efd\u88ab\u7a00\u91ca\u7684\u9650\u5236\u65f6\u95f4\u6bd4\u4ee5\u524d\u5c11\uff0c\u8be5\u63d0\u8bae\u5c06\u81ea\u52a8\u88ab\u62d2\u7edd\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"abort_window")," - \u7533\u8bf7\u4eba\u53ef\u4ee5\u5728\u9000\u6b3e\u7684\u60c5\u51b5\u4e0b\u53d6\u6d88\u63d0\u6848\u7684\u65f6\u95f4\u95f4\u9694(\u63d0\u6848\u63d0\u4ea4\u540e\u7acb\u5373\u5f00\u59cb)\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"total_shares")," - \u6240\u6709\u6210\u5458\u7684\u603b\u4f53\u4efd\u989d\u3002\u521d\u59cb\u65f6\u662f 0."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"members")," - DAO \u6240\u6709\u6210\u5458\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"member_by_delegate_key")," - \u6620\u5c04\u63d0\u4ea4\u7684\u63d0\u6848\u7684 Key \u548c\u6210\u5458\u5730\u5740\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"proposal_id")," - \u6700\u540e\u4e00\u4e2a\u63d0\u6848\u7684\u7d22\u5f15\u7f16\u53f7\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"proposals")," - \u6240\u6709\u7684\u63d0\u6848\uff08\u63d0\u6848\u961f\u5217\uff09\u3002"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"approved_list")," - \u6240\u6709\u88ab\u6279\u51c6\u7684\u52a0\u5165 DAO \u7684\u884c\u4e3a\u4eba\u3002"),(0,o.kt)("p",null,"\u53c2\u6570 ",(0,o.kt)("inlineCode",{parentName:"p"},"admin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"approved_token_program_id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"period_duration"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"grace_period_length"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"dilution_bound"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"abort_window")," \u5728\u5408\u7ea6\u521d\u59cb\u5316\u65f6\u8fdb\u884c\u8bbe\u7f6e\u3002\u5408\u7ea6\u521d\u59cb\u5316\u5728\u4ee5\u4e0b\u51fd\u6570\u4e2d\u8fdb\u884c:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[no_mangle]\npub unsafe extern "C" fn init() {\n    ...\n}\n')),(0,o.kt)("p",null,"\u521d\u59cb\u5316\u53c2\u6570\u4f7f\u7528\u5982\u4e0b\u6570\u636e\u7ed3\u6784: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"struct InitConfig {\n    admin: H256,\n    approved_token_program_id: H256,\n    guild_bank_id: H256,    \n    period_duration: u64,\n    voting_period_length: u64,\n    grace_period_length: u64,\n    dilution_bound: u128,\n    abort_window: u64,\n}\n")),(0,o.kt)("p",null,"\u63d0\u6848\u6570\u636e\u7ed3\u6784:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"}," pub struct Proposal {\n    pub proposer: ActorId, /// - the member who submitted the proposal\n    pub applicant: ActorId, /// - the applicant who wishes to become a member \n    pub shares_requested: u128, /// - the amount of shares the applicant is requesting\n    pub yes_votes: u128, /// - the total number of YES votes for that proposal\n    pub no_votes: u128, /// - the total number of NO votes for that proposal\n    pub quorum: u128, /// - a certain threshold of YES votes in order for the proposal to pass\n    pub is_membership_proposal: bool, /// - true if it is a membership proposal, false if it is a funding proposal\n    pub processed: bool, /// - true if the proposal has already been processed\n    pub did_pass: bool, /// - true if the proposal has passed\n    pub canceled: bool, /// - true if the proposal has been canceled\n    pub aborted: bool, /// - true if the proposal has been aborted\n    pub token_tribute: u128, /// - the number of tokens offered for shares\n    pub details: String, /// - proposal details\n    pub starting_period: u64, /// - the start of the voting period\n    pub max_total_shares_at_yes_vote: u128, /// - the number of total shares that were detected at yes votes\n    pub votes_by_member: BTreeMap<H256, Vote>, /// - the votes on that proposal by each member\n}\n")),(0,o.kt)("p",null,"\u6210\u5458\u6570\u636e\u7ed3\u6784:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Member {\n    pub delegate_key: ActorId, /// - the key responsible for submitting proposals and voting ( by default it is equal to member address)\n    pub shares: u128, /// - the shares of that member\n    pub highest_index_yes_vote: u128, /// - the index of the highest proposal on which the members voted YES (that value is checked when user is going to leave the DAO)\n}\n")),(0,o.kt)("p",null,"\u5408\u7ea6\u63a5\u6536\u7684\u5916\u90e8 Action \u5728\u679a\u4e3e ",(0,o.kt)("inlineCode",{parentName:"p"},"Actions")," \u4e2d\u5b9a\u4e49\u3002\u5408\u7ea6\u7684\u8fd4\u56de\u5728\u679a\u4e3e ",(0,o.kt)("inlineCode",{parentName:"p"},"Events")," \u4e2d\u5b9a\u4e49\u3002"),(0,o.kt)("h2",{id:"dao-\u51fd\u6570"},"DAO \u51fd\u6570"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6dfb\u52a0\u884c\u4e3a\u4eba\u5230\u5ba1\u6838\u5217\u8868\u4e2d\u3002\u8fd9\u4e9b\u88ab\u6dfb\u52a0\u7684\u884c\u4e3a\u4eba\u53ef\u4ee5\u5b58\u5165\u4ed6\u4eec\u7684 Token \u5230 DAO \u4e2d\uff0c\u540c\u65f6 DAO \u7684\u6210\u5458\u53ef\u4ee5\u63d0\u4ea4\u63d0\u6848\u6765\u5c06\u4ed6\u4eec\u52a0\u5165 DAO \u6210\u5458\u4e2d\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"fn add_to_approved_list(\n        &mut self,\n        member: &ActorId,\n)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u52a0\u5165DAO\u7684\u63d0\u8bae\u3002\u63d0\u6848\u53ea\u80fd\u7531\u73b0\u6709\u6210\u5458\u63d0\u4ea4\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn submit_membership_proposal(\n        &mut self,\n        applicant: &ActorId,\n        token_tribute: u128,\n        shares_requested: u128,\n        quorum: u128,\n        details: String,\n    )\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8d44\u52a9\u63d0\u6848\u3002\u201c\u7533\u8bf7\u4eba\u201d\u662f\u4e00\u4e2a\u5c06\u5f97\u5230\u8d44\u52a9\u7684\u884c\u4e3a\u4eba\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn submit_funding_proposal(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0&mut self,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0applicant: &ActorId,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0amount: u128,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0quorum: u128,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0details: String,\n\xa0\xa0\xa0\xa0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6210\u5458\u6216\u8005\u6210\u5458\u7684\u59d4\u6258\u5730\u5740\u53ef\u4ee5\u63d0\u4ea4\u4ed6\u4eec\u5bf9\u4e8e\u63d0\u6848\u7684\u6295\u7968\uff08YES \u6216 NO\uff09\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn submit_vote(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0&mut self,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0proposal_id: u128,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0vote: Vote,\n\xa0\xa0\xa0\xa0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7533\u8bf7\u4eba\u4e2d\u6b62\u63d0\u6848\u7684\u6743\u5229\u3002\u5982\u679c\u7533\u8bf7\u4eba\u4e0d\u540c\u610f\u7533\u8bf7\u4eba\u6240\u8bf7\u6c42\u7684\u80a1\u4efd\u6216\u7533\u8bf7\u4eba\u6240\u8868\u793a\u7684\u7ec6\u8282\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6743\u5229\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn abort(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0&mut self,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0proposal_id: u128\n\xa0\xa0\xa0\xa0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5982\u679c\u6ca1\u6709\u8d5e\u6210\u7968\uff0c\u63d0\u6848\u4eba\u6709\u6743\u5728\u6295\u7968\u671f\u7ed3\u675f\u540e\u53d6\u6d88\u63d0\u6848\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn cancel_proposal(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0&mut self,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0proposal_id: u128,\n\xa0\xa0\xa0\xa0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u6210\u5458\u5728\u5bbd\u9650\u671f\u5185\u63d0\u53d6\u8d44\u4ea7\u7684\u6743\u5229\u3002\u5982\u679c\u6210\u5458\u4eec\u4e0d\u540c\u610f\u63d0\u6848\u7684\u7ed3\u679c\uff0c\u540c\u65f6\u63d0\u6848\u88ab\u91c7\u7eb3\u7684\u8bdd\uff0c\u4f1a\u5bf9\u4ed6\u4eec\u7684\u80a1\u4efd\u4ea7\u751f\u5f71\u54cd\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6743\u5229\u3002\u8be5\u6210\u5458\u53ea\u6709\u5bf9\u90a3\u9879\u63d0\u6848\u6295\u4e86\u53cd\u5bf9\u7968\u624d\u80fd\u6124\u7136\u9000\u51fa\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn ragequit(\n    &mut self,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0amount: u128,\n\xa0\xa0\xa0\xa0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5bbd\u9650\u671f\u5185\u63d0\u6848\u7ade\u4e89\u540e\u7684\u63d0\u6848\u5904\u7406\u3002\u5982\u679c\u63d0\u6848\u88ab\u63a5\u53d7\uff0c\u62b5\u62bc\u4ee3\u5e01\u5b58\u5165\u5408\u7ea6\u548c\u65b0\u7684\u4efd\u989d\u88ab\u94f8\u9020\u5e76\u53d1\u884c\u7ed9\u7533\u8bf7\u4eba\u3002\u5982\u679c\u63d0\u6848\u88ab\u62d2\u7edd\uff0c\u62b5\u62bc\u7684\u4ee3\u5e01\u5c06\u9000\u8fd8\u7ed9\u7533\u8bf7\u4eba\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"async fn process_proposal(\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0&mut self,\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0proposal_id: u128\n\xa0\xa0\xa0\xa0)\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u8fd9\u4e9b\u51fd\u6570\u5c06\u5728 ",(0,o.kt)("inlineCode",{parentName:"li"},"async fn main()")," \u4e2d\u901a\u8fc7 ",(0,o.kt)("inlineCode",{parentName:"li"},"Actions")," \u6765\u8c03\u7528\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'    #[gstd::async_main]\n    async fn main() {\n        let action: Action = msg::load().expect("Could not load Action");\n        match action {\n        Action::AddToWhiteList(input) => {\n            DAO.add_to_whitelist(&ActorId::new(input.to_fixed_bytes()))\n        }\n        Action::SubmitMembershipProposal(input) => {\n            let applicant = ActorId::new(input.applicant.to_fixed_bytes());\n            DAO.submit_membership_proposal(\n                &applicant,\n                input.token_tribute,\n                input.shares_requested,\n                input.quorum,\n                input.details,\n            )\n            .await;\n        }\n        Action::SubmitFundingProposal(input) => {\n            let applicant = ActorId::new(input.applicant.to_fixed_bytes());\n            DAO.submit_funding_proposal(&applicant, input.amount, input.quorum, input.details)\n                .await;\n        }\n                        ...\n            }\n    }\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u94fe\u4e0b\u83b7\u53d6\u5408\u7ea6\u72b6\u6001\u7684\u80fd\u529b\u4e5f\u5f88\u91cd\u8981\u3002\u5408\u7ea6\u72b6\u6001\u5728 ",(0,o.kt)("inlineCode",{parentName:"li"},"fn meta_state()")," \u4e2d\u5b9a\u4e49\u3002\u5408\u7ea6\u6536\u5230\u8bfb\u53d6\u67d0\u6570\u636e\u8bf7\u6c42\uff08\u53ef\u63a5\u53d7\u7684\u8bf7\u6c42\u88ab\u5b9a\u4e49\u5728 ",(0,o.kt)("inlineCode",{parentName:"li"},"State")," \u7ed3\u6784\u4e2d\uff09\u65f6\u53d1\u9001\u76f8\u5e94\u7684\u8fd4\u56de\u6570\u636e\u3002\u5408\u7ea6\u8fd4\u56de\u7684\u6570\u636e\u5b9a\u4e49\u5728 ",(0,o.kt)("inlineCode",{parentName:"li"},"StateReply")," \u4e2d\u3002")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'pub unsafe extern "C" fn meta_state() -> *mut [i32; 2] {\n    let state: State = msg::load().expect("failed to decode input argument");\n    let encoded = match state {\n        State::IsMember(input) => {\n    StateReply::IsMember(DAO.is_member(&ActorId::new(input.to_fixed_bytes()))).encode()\n        }\n       ...\n    };\n    let result = gstd::macros::util::to_wasm_ptr(&(encoded[..]));\n    core::mem::forget(encoded);\n    result\n}\n')))}d.isMDXComponent=!0}}]);